
shashireddy408417
EMGTWPHW


HIVE PROJECT

Hive - Project - Sentiment Analysis

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


/data/SentimentFiles/SentimentFiles/upload/data


We'll calculate sentiment using a rudimentary technique. We've polarity of common words in below dictionary file in HDFS

/data/SentimentFiles/SentimentFiles/upload/data/dictionary/dictionary.tsv


 hadoop fs -cp /data/SentimentFiles /user/shashireddy408417


ADD JAR hdfs:///data/hive/json-serde-1.1.9.9-Hive13-jar-with-dependencies.jar;


CREATE DATABASE IF NOT EXISTS shashireddy408417;
USE shashireddy408417;


CREATE EXTERNAL TABLE tweets_raw (
    id BIGINT,
    created_at STRING,
    source STRING,
    favorited BOOLEAN,
    retweet_count INT,
    retweeted_status STRUCT<
    text:STRING,
    users:STRUCT<screen_name:STRING,name:STRING>>,
    entities STRUCT<
    urls:ARRAY<STRUCT<expanded_url:STRING>>,
    user_mentions:ARRAY<STRUCT<screen_name:STRING,name:STRING>>,
    hashtags:ARRAY<STRUCT<text:STRING>>>,
    text STRING,
    user STRUCT<
    screen_name:STRING,
    name:STRING,
    friends_count:INT,
    followers_count:INT,
    statuses_count:INT,
    verified:BOOLEAN,
    utc_offset:STRING, -- was INT but nulls are strings
    time_zone:STRING>,
    in_reply_to_screen_name STRING,
    year int,
    month int,
    day int,
    hour int
)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
WITH SERDEPROPERTIES ("ignore.malformed.json" = "true")
LOCATION '/user/shashireddy408417/SentimentFiles/SentimentFiles/upload/data/tweets_raw';



CREATE EXTERNAL TABLE shashireddy408417.dictionary(
type string,
length int,
word string,
pos string,
stemmed string,
polarity string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
STORED AS TEXTFILE
LOCATION '/user/shashireddy408417/SentimentFiles/SentimentFiles/upload/data/dictionary';




    CREATE EXTERNAL TABLE time_zone_map (
    time_zone string,
    country string,
    notes string
    )
    ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
    STORED AS TEXTFILE
    LOCATION '/user/shashireddy408417/SentimentFiles/SentimentFiles/upload/data/time_zone_map';


Tables;


dictionary
time_zone_map
tweets_raw


SET hive.support.sql11.reserved.keywords=false;



 Create view _tweets_simple_. _tweets_simple_ view contains tweet id, the timestamp of the tweet, tweet text and user's time zone. Run below command in the Hive query editor in Hue

CREATE VIEW tweets_simple AS
SELECT          
id,
cast(from_unixtime(unix_timestamp(concat('2013 ',substring(created_at,5,15)),'yyyy MMM dd hh:mm:ss')) as timestamp) ts,
text,
user.time_zone 
FROM tweets_raw;



Sample rows of view _l1_ are 


Create view _l1_. _l1_ view converts each tweet into lower case and explodes it into a list of words. Run below command in Hive query editor in Hue.

create view l1 as select id, words from tweets_raw lateral view explode(sentences(lower(text))) dummy as words;


Sample rows of view _l1_ are 


Create view _l2_. _l2_ view stores every word of a tweet in a new row. Run below command in Hive query editor in Hue.

create view l2 as select id, word from l1 lateral view explode( words ) dummy as word ;


Sample rows of view _l2_ are 


create view l3 as select 
id, 
l2.word,
case d.polarity 
when  'negative' then -1
when 'positive' then 1 
else 0 end as polarity 
from l2 left outer join dictionary d on l2.word = d.word;



stockexchange STRING, symbol STRING, ymd STRING, price_open FLOAT, price_high FLOAT, price_low FLOAT, price_close FLOAT, volume INT, price_adj_close FLOAT
/data/NYSE_daily

select symbol,ymd,max(price_open-price_close) as mx from shashireddy408417.nyse group by mx  

nyse


CREATE EXTERNAL TABLE shashireddy408417.nyse(
stockexchange STRING,
symbol STRING,
ymd STRING,
price_open FLOAT,
price_high FLOAT,
price_low FLOAT,
price_close FLOAT,
volume INT,
price_adj_close FLOAT
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
STORED AS TEXTFILE
LOCATION '/user/shashireddy408417/NYSE_daily';

 hadoop fs -cp /data/NYSE_daily /user/shashireddy408417


 select (price_high-price_low) as change,cast(substr(ymd,6,8) as int) as month, from nyse1 order by change DESC;

 MONTH(from_unixtime(unix_timestamp('ymd' , 'yyyy-MM-dd')))

 2009-12-31



